view.backgroundColor = UIColor(named: "themedBackgroundColor")
------------------------------------------------------------------------
static var appTintColor: UIColor = {
    if #available(iOS 13, *) {
        return UIColor { (traitCollection: UITraitCollection) -> UIColor in
            if traitCollection.userInterfaceStyle == .dark {
                return UIColor(red: 1.0, green: 0, blue: 0.0, alpha: 1.0) // Темный цвет из палитры
            } else {
                return UIColor(red: 0.3, green: 0.3, blue: 0.3, alpha: 1.0) // Светлый цвет из палитры
            }
        }
    } else {
        return UIColor.systemBlue // Цвет по умолчанию
    }
}()

label.textColor = CameraViewController.appTintColor
-------------------------------------------------------------------------
label.textColor = UIColor.createColor(lightMode: UIColor(red: 0.3, green: 0.3, blue: 0.3, alpha: 1.0), darkMode: UIColor(red: 1.0, green: 0, blue: 0.0, alpha: 1.0))

extension UIColor {
  static var appTintColor: UIColor = {
      if #available(iOS 13, *) {
          return UIColor { (traitCollection: UITraitCollection) -> UIColor in
              if traitCollection.userInterfaceStyle == .dark {
                  return UIColor(red: 1.0, green: 0, blue: 0.0, alpha: 1.0) // Темный цвет из палитры
              } else {
                  return UIColor(red: 0.3, green: 0.3, blue: 0.3, alpha: 1.0) // Светлый цвет из палитры
              }
          }
      } else {
          return UIColor.systemBlue // Цвет по умолчанию
      }
  }()

  static func createColor(lightMode: UIColor, darkMode: UIColor) -> UIColor {
      guard #available(iOS 13.0, *) else {
          return lightMode
      }
      return UIColor { (traitCollection) -> UIColor in
          return traitCollection.userInterfaceStyle == .light ? lightMode : darkMode
      }
  }
}
-------------------------------------------------------------------------
imageView.image = UIImage(named: "bigImage_1")

override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {
    super.traitCollectionDidChange(previousTraitCollection)

    if UITraitCollection.current.userInterfaceStyle == .dark {
        //imageView = self.downloadedImage1
    } else {
        //imageView = self.downloadedImage2
    }
}
-------------------------------------------------------------------------

struct Theme {
    enum ThemeType {
        case light
        case dark
        @available(iOS 13.0, *)
        case adaptive
    }

    static let light = Theme(type: .light, colors: .light)
    static let dark = Theme(type: .dark, colors: .dark)
    @available(iOS 13.0, *)
    static let adaptive = Theme(type: .adaptive, colors: .adaptive)

    static var current: Theme = {
        if UITraitCollection.current.userInterfaceStyle == .dark {
            return .dark
        } else {
            return .light
        }
    }() {
        didSet {
            guard let scene = UIApplication.shared.connectedScenes.first else { return }
            guard let mainWindow = (scene as? UIWindowScene)?.keyWindow else { return }

            mainWindow.subviews.forEach { subview in
                if let themeable = subview as? Themeable {
                    themeable.apply(theme: current)
                }
            }
        }
    }

    let type: ThemeType
    let colors: ColorPalette
}

struct ColorPalette {
    let main: UIColor
    let tint: UIColor
    let background: UIColor

    static let light = ColorPalette(main: .white, tint: .blue, background: .gray)
    static let dark = ColorPalette(main: .gray, tint: .systemBlue, background: .black)
    static let adaptive = ColorPalette(
        main: UIColor(named: "themedMainColor") ?? UIColor(),
        tint: UIColor(named: "themedTintColor") ?? UIColor(),
        background: UIColor(named: "themedBackgroundColor") ?? UIColor())
}

// Протокол для адаптации всем view компонентам
protocol Themeable: AnyObject {
    func apply(theme: Theme)
}

@IBAction func buttonDidTap(_ button: UIButton) {
    if Theme.current.type == .dark {
        Theme.current = .light
    } else {
        Theme.current = .dark
    }
}
}

extension UILabel: Themeable {
func apply(theme: Theme) {
    textColor = theme.colors.main
}
}

----------------------------------------------------
