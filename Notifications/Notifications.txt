print("Уведомление запланировано")
        let center = UNUserNotificationCenter.current()
        center.removeAllPendingNotificationRequests()


        let content = UNMutableNotificationContent()


        content.title = "Сделать домашнее задание"
        content.body = "Нужно настроить уведомления для приложения ВК"
        content.categoryIdentifier = "alarm"
        content.userInfo = ["CustomData": "qwerty"]
        content.sound = .default

        var dateComponents = DateComponents()
        dateComponents.hour = 19
        dateComponents.minute = 30
//        (1) вариант с планированием уведомления по времени
//        let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents, repeats: true)
//        (2) вариант с уведомлением через 5 секунд. После нажатия "запланировать уведомление" нажать command + L, через 5 секунд уведомление появится на экране симулятора
        let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 5, repeats: false)
        let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: trigger)
        center.add(request)

------------------------------------------------------------------------------------------------
@IBAction func scheduleNotification(_ sender: Any) {
        registerCategories()

        print("Уведомление запланировано")
        let center = UNUserNotificationCenter.current()
        center.removeAllPendingNotificationRequests()

        let content = UNMutableNotificationContent()

        content.title = "Сделать домашнее задание"
        content.body = "Нужно настроить уведомления для приложения ВК"
        content.sound = .default
        content.categoryIdentifier = "myNotificationCategory"


        let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 5, repeats: false)
        let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: trigger)
        center.add(request)
    }

    func registerCategories() {
        let center = UNUserNotificationCenter.current()
        center.delegate = self

        let actionShow = UNNotificationAction(identifier: "Показать", title: "Показать больше", options: .foreground)
        let category = UNNotificationCategory(identifier: "alarm", actions: [actionShow], intentIdentifiers: [], options: [])

        center.setNotificationCategories([category])
    }
}





extension ViewController: UNUserNotificationCenterDelegate {

    func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {

        switch response.actionIdentifier {
        case UNNotificationDefaultActionIdentifier:
            // пользователь нажал на уведомление снова, но не на нашу кнопку
            print("Default Identifier")
        case "Показать":
            print("Показать больше информации")
        default:
            break
        }
        completionHandler()
    }
}

----------------------------------------------------------------------------
