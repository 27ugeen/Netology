private lazy var managedObjectModel: NSManagedObjectModel = {
      guard let modelURL = Bundle.main.url(forResource: "DataBaseModel", withExtension: "momd") else {
          fatalError("Unable to Find Data Model")
      }

      guard let managedObjectModel = NSManagedObjectModel(contentsOf: modelURL) else {
          fatalError("Unable to Load Data Model")
      }

      return managedObjectModel
  }()
------------------------------------------------------------------------------------------------------

private lazy var persistentStoreCoordinator: NSPersistentStoreCoordinator = {
        let persistentStoreCoordinator = NSPersistentStoreCoordinator(managedObjectModel: self.managedObjectModel)

        let storeName = "DatabaseModel.sqlite"

        let documentsDirectoryURL = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]

        let persistentStoreURL = documentsDirectoryURL.appendingPathComponent(storeName)
        do {
            try persistentStoreCoordinator.addPersistentStore(ofType: NSSQLiteStoreType,
                                                              configurationName: nil,
                                                              at: persistentStoreURL,
                                                              options: nil)
        } catch {
            fatalError("Unable to Load Persistent Store")
        }

        return persistentStoreCoordinator
    }()

------------------------------------------------------------------------------------------------------

private(set) lazy var managedObjectContext: NSManagedObjectContext = {
    let managedObjectContext = NSManagedObjectContext(concurrencyType: .mainQueueConcurrencyType)

    managedObjectContext.persistentStoreCoordinator = self.persistentStoreCoordinator

    return managedObjectContext
}()
------------------------------------------------------------------------------------------------------

func getLaunchesNumber() -> Int {
        let fetchRequest = LaunchStatus.fetchRequest()
        do {
            let settings = try managedObjectContext.fetch(fetchRequest)
            if let set = settings.first {
                return Int(truncatingIfNeeded: set.numberOfLaunches)
            }
            else {
                return 0
            }
        } catch let error {
            print(error)
        }
        return 0
    }

    ------------------------------------------------------------------------------------------------------
    func increaseNumberOfLaunches() {
            let fetchRequest = LaunchStatus.fetchRequest()
            do {
                let settings = try managedObjectContext.fetch(fetchRequest)
                if let set = settings.first {
                    set.numberOfLaunches += 1
                }
                else {
                    if let newSettings = NSEntityDescription.insertNewObject(forEntityName: "LaunchStatus", into: managedObjectContext) as? LaunchStatus {
                        newSettings.numberOfLaunches = 0
                        newSettings.lastLaunchDate = Date()
                    }
                    else {
                        fatalError("Unable to insert LaunchStatus entity")
                    }
                }

                try managedObjectContext.save()
            } catch let error {
                print(error)
            }
        }
    ------------------------------------------------------------------------------------------------------


    let numberOfLaunches = DataBaseManager.shared.getLaunchesNumber()
            print("üö® Number of launches is: \(numberOfLaunches)")

            print("Increasing number of launches...")
            DataBaseManager.shared.increaseNumberOfLaunches()

            if let lastStatus = DataBaseManager.shared.getLastLauchStatus() {
                let lastDate = lastStatus.lastLaunchDate ?? Date()
                print("‚ö†Ô∏è Now number of launches is: \(lastStatus.numberOfLaunches) at date: \(lastDate)")
            }

------------------------------------------------------------------------------------------------------
private let persistentContainer: NSPersistentContainer

init() {

let container = NSPersistentContainer(name: "DatabaseModel")
container.loadPersistentStores { description, error in
   if let error = error {
       fatalError("Unable to load persistent stores: \(error)")
   }
}
self.persistentContainer = container
}
